package com.example.ashish.passwardmanager;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

import com.example.ashish.passwardmanager.data.PasswordContract;
import com.example.ashish.passwardmanager.data.PasswordDbHelper;

public class DisplayActivity extends AppCompatActivity implements
        LoaderManager.LoaderCallbacks<Cursor> {
    private RecyclerView recyclerView;
    PasswordRecyclerViewAdaptor passwordRecyclerViewAdaptor;
    SQLiteDatabase mDb;
    Cursor cursor;
    private static final String TAG = DisplayActivity.class.getSimpleName();
    private static final int TASK_LOADER_ID = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_display);
        PasswordDbHelper dbHelper = new PasswordDbHelper(this);

        mDb = dbHelper.getReadableDatabase();
        recyclerView = findViewById(R.id.recyclerview);

        recyclerView.hasFixedSize();
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        passwordRecyclerViewAdaptor = new PasswordRecyclerViewAdaptor(getApplicationContext(), cursor);
        getSupportLoaderManager().initLoader(TASK_LOADER_ID, null, this);
        passwordRecyclerViewAdaptor.swapCursor(cursor);


    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return super.onCreateOptionsMenu(menu);

    }

    @Override
    protected void onResume() {
        super.onResume();

        // re-queries for all tasks
        getSupportLoaderManager().restartLoader(TASK_LOADER_ID, null, this);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.add) {
            startActivity(new Intent(DisplayActivity.this, InputPasswordActivity.class));

        }
        return super.onOptionsItemSelected(item);
    }

    private Cursor getAllPassword() {
        return mDb.query(
                PasswordContract.PasswordEntry.TABLE_NAME,
                null,
                null,
                null,
                null,
                null,
                PasswordContract.PasswordEntry._ID
        );
    }

    @SuppressLint("StaticFieldLeak")
    @Override
    public Loader<Cursor> onCreateLoader(int id, final Bundle loaderArgs) {

        return new AsyncTaskLoader<Cursor>(this) {

            // Initialize a Cursor, this will hold all the task data
            Cursor mTaskData = null;

            // onStartLoading() is called when a loader first starts loading data
            @Override
            protected void onStartLoading() {
                if (mTaskData != null) {
                    // Delivers any previously loaded data immediately
                    deliverResult(mTaskData);
                } else {
                    // Force a new load
                    forceLoad();
                }
            }

            // loadInBackground() performs asynchronous loading of data
            @Override
            public Cursor loadInBackground() {
                // Will implement to load data

                // Query and load all task data in the background; sort by priority
                // [Hint] use a try/catch block to catch any errors in loading data

                try {
                    return mDb.query(
                            PasswordContract.PasswordEntry.TABLE_NAME,
                            null,
                            null,
                            null,
                            null,
                            null,
                            PasswordContract.PasswordEntry._ID + " DESC");

                } catch (Exception e) {
                    Log.e(TAG, "Failed to asynchronously load data.");
                    e.printStackTrace();
                    return null;
                }
            }

            // deliverResult sends the result of the load, a Cursor, to the registered listener
            public void deliverResult(Cursor data) {
                mTaskData = data;
                cursor = data;
                super.deliverResult(data);
            }
        };

    }


    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        // Update the data that the adapter uses to create ViewHolders
        cursor = data;
        recyclerView.setAdapter(passwordRecyclerViewAdaptor);
        passwordRecyclerViewAdaptor.swapCursor(data);
    }


    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        passwordRecyclerViewAdaptor.swapCursor(null);
    }

}
